openapi: 3.0.0
info:
  title: Webservices API
  description: API voor het vak webservices
  version: 0.1.0
servers:
  - url: https://webserviceshogent.herokuapp.com/api/
  - url: http://localhost:9000/api
tags:
  - name: User
    description: Everything about users
  - name: Post
    description: Everything about posts
  - name: Comment
    description: Everything about comments
paths:
  /users:
    get:
      security:
        - bearerAuth: []
      summary: Returns a list of users.
      description: Optional extended description in CommonMark or HTML.
      tags:
        - User
      responses:
        '200':    # status code
          description: A JSON array of user object + token
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string
  /users/{id}:
    get:
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      summary: Returns a specific user.
      tags:
        - User
      responses:
        '200':    # status code
          description: A JSON array of user object + token
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string
    put:
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      summary: Updates a specific user.
      tags:
        - User
      responses:
        '200':    # status code
          description: A JSON array of user object + token
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string 
    delete:
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      summary: Deletes a specific user.
      tags:
        - User
      responses:
        '200':    # status code
          description: A JSON array of user object + token
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string     
  /users/login:
    post:
      summary: Login a user
      tags:
        - User
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '201':
          description: Created
  /users/register:
    post:
      summary: Sign up a user
      tags:
        - User
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '200':
          description: User Registered
  /posts:
    get:
      security:
        - bearerAuth: []
      summary: Returns a list of posts.
      description: Optional extended description in CommonMark or HTML.
      tags:
        - Post
      responses:
        '200':    # status code
          description: A JSON array of user object + token
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string
    post:
      summary: add a post
      security:
        - bearerAuth: []
      tags:
        - Post
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePost'
      responses:
        '200':
          description: Post posted
  /posts/{id}:
    get:
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Post ID
          required: true
          schema:
            type: integer
            format: int64
      summary: Returns a specific post.
      tags:
        - Post
      responses:
        '200':    # status code
          description: A JSON array of user object + token
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string
    put:
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Post ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePost'
      summary: Updates a specific post.
      tags:
        - Post
      responses:
        '200':    # status code
          description: A JSON array of user object + token
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string 
    delete:
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Post ID
          required: true
          schema:
            type: integer
            format: int64
      summary: Deletes a specific post.
      tags:
        - Post
      responses:
        '200':    # status code
          description: A JSON array of user object + token
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string 





  /comments:
    get:
      security:
        - bearerAuth: []
      summary: Returns a list of comments.
      description: Optional extended description in CommonMark or HTML.
      tags:
        - Comment
      responses:
        '200':    # status code
          description: A JSON array of user object + token
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string
    post:
      security:
        - bearerAuth: []
      summary: add a comment
      tags:
        - Comment
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateComment'
      responses:
        '200':
          description: Comment posted
  /comments/{id}:
    get:
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Comment ID
          required: true
          schema:
            type: integer
            format: int64
      summary: Returns a specific comment.
      tags:
        - Comment
      responses:
        '200':    # status code
          description: A JSON array of user object + token
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string
    put:
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Comment ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateComment'
      summary: Updates a specific comment.
      tags:
        - Comment
      responses:
        '200':    # status code
          description: A JSON array of user object + token
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string 
    delete:
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Comment ID
          required: true
          schema:
            type: integer
            format: int64
      summary: Deletes a specific comment.
      tags:
        - Comment
      responses:
        '200':    # status code
          description: A JSON array of user object + token
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string 



components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    CreateComment:
      type: object
      properties:
        description:
          type: string
        author:
          type: integer  
      required:
        - description
        - author
    UpdateComment:
      type: object
      properties:
        description:
          type: string
      required:
        - description
    CreatePost:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        author:
          type: integer  
      required:
        - title
        - description
        - author
    UpdatePost:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
      required:
        - title
        - description
    UpdateUser:
      type: object
      properties:
        naam:
          type: string
        voornaam:
          type: string
        email:
          type: string  
      required:
        - email
        - password 
    UserLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    UserRegister:
      type: object
      properties:
        naam:
          type: string
        voornaam:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - naam
        - voornaam
        - email
        - password